#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef int Item;

#define MAXQUEUE	10

typedef struct node
{
	Item item;
	struct node *next;
}Node;

typedef struct queue
{
	Node *front;        //指向队列首项的指针
	Node *rear;         //指向队列尾项的指针
	int items;          //队列中的项数
}Queue;
				
void InitializeQueue(Queue *pq);		//初始化队列

bool QueueIsFull(const Queue *pq);	//检查队列是否已满

bool QueueIsEmpty(const Queue *pq);	//检查队列是否为空	

bool EnQueue(Item item, Queue *pq);	//在队列末尾添加项

bool DeQueue(Item *pitem, Queue *pq); //从队列的开头删除项

void EmptyTheQueue(Queue *pq);		   //清空队列

int QueueItemCount(const Queue *pq);	//确定队列中的项数
/*             以上为头文件                       */
#include "Queue.h"

//局部函数
static void CopyToNode(Item item, Node *pn);
static void CopyToItem(Node *pn, Item *pi);

//初始化
void InitializeQueue(Queue *pq)
{
	pq->front = pq->rear = NULL;
	pq->items = 0;
}

//检查队列是否已满
bool QueueIsFull(const Queue *pq)
{
	return pq->items == MAXQUEUE;
}

//检查队列是否为空
bool QueueIsEmpty(const Queue *pq)
{
	return pq->items == 0;
}

//确定队列中的项数
int QueueItemCount(const Queue *pq)
{
	return pq->items;
}

//在队列末尾添加项
bool EnQueue(Item item, Queue *pq)
{
	Node *pnew;

	if (QueueIsFull(pq))
		return false;

	pnew = (Node *)malloc(sizeof(Node));
	if (pnew == NULL)
	{
		fprintf(stderr, "无法分配内存!\n");
		exit(1);
	}

	CopyToNode(item, pnew);
	pnew->next = NULL;

	if (QueueIsEmpty(pq))
		pq->front = pnew;        //项位于队列的首端
	else
		pq->front->next = pnew;   //链接到队列的尾端

	pq->rear = pnew;			//记录队列尾端的位置
	pq->items++;                 //队列项数加1

	return true;
}

//从队列的开头删除项
bool DeQueue(Item *pitem, Queue *pq)
{
	Node *pt;

	if (QueueIsEmpty(pq))
		return false;

	CopyToItem(pq->front, pitem);

	pt = pq->front;
	pq->front = pq->front->next;
	free(pt);

	pq->items--;

	if (pq->items == 0)
		pq->rear = NULL;

	return true;
}

//清空队列
void EmptyTheQueue(Queue *pq)
{
	Item dummy;
	while (!QueueIsEmpty(pq))
		DeQueue(&dummy, pq);
}

//局部函数
static void CopyToNode(Item item, Node *pn)
{
	pn->item = item;
}

static void CopyToItem(Node *pn, Item *pi)
{
	*pi = pn->item;
}

void main()
{
	Queue line;
	Item temp;
	char ch;

	InitializeQueue(&line);
	puts("(a)添加 (d)删除 (q)退出");

	while ((ch = getchar()) != 'q')
	{
		if (ch != 'a' && ch != 'd')     //忽略其他输出
			continue;
		if (ch == 'a')
		{
			printf("\n输入任意数:");
			scanf("%d", &temp);
			if (!QueueIsFull(&line))
			{
				printf("\n已将 %d 放到队列中，", temp);
				EnQueue(temp, &line);
			}
			else
				puts("队列是不完整的!");
		}
		else
		{
			if (QueueIsEmpty(&line))
				puts("删除失败!");
			else
			{
				DeQueue(&temp, &line);
				printf("从队列删除% d\n", temp);
			}
		}
		printf("队列大小为%d ....\n\n", QueueItemCount(&line));
		puts("(a)添加 (d)删除 (q)退出:");
	}
	EmptyTheQueue(&line);
	puts("Bye");

}
